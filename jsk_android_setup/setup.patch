diff -r 2cd488729f61 android_gingerbread_mr1/jni/Android.mk
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/android_gingerbread_mr1/jni/Android.mk	Wed Oct 10 17:25:17 2012 +0900
@@ -0,0 +1,8 @@
+LOCAL_PATH := $(call my-dir)
+
+include $(CLEAR_VARS)
+
+LOCAL_MODULE := calculate
+LOCAL_SRC_FILES := calculate.c
+
+include $(BUILD_SHARED_LIBRARY)
\ No newline at end of file
diff -r 2cd488729f61 android_gingerbread_mr1/jni/calculate.c
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/android_gingerbread_mr1/jni/calculate.c	Wed Oct 10 17:25:17 2012 +0900
@@ -0,0 +1,22 @@
+#include <jni.h>
+
+void Java_org_ros_android_BitmapFromCompressedImage_translateBGRtoRGB(JNIEnv* env,jobject this,jintArray src,jint width,jint height){
+  
+  int i, totalPixel;
+  int result = 0;
+
+    jint* arr1 = (*env)->GetPrimitiveArrayCritical(env,src,0);
+
+  totalPixel = width * height;
+
+  for(i=0;i<totalPixel;i++){
+    int red = (arr1[i] & 0x00FF0000) >> 16;
+    int green = (arr1[i] & 0xFF00FF00);
+    int blue = (arr1[i] & 0x000000FF) << 16;
+    arr1[i] = ((red | blue) | green);
+  }
+  
+  (*env)->ReleasePrimitiveArrayCritical(env,src,arr1,0);
+  
+  
+}
diff -r 2cd488729f61 android_gingerbread_mr1/src/org/ros/android/BitmapFromCompressedImage.java
--- a/android_gingerbread_mr1/src/org/ros/android/BitmapFromCompressedImage.java	Wed Sep 19 19:14:38 2012 +0200
+++ b/android_gingerbread_mr1/src/org/ros/android/BitmapFromCompressedImage.java	Wed Oct 10 17:25:17 2012 +0900
@@ -12,7 +12,7 @@
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
  * License for the specific language governing permissions and limitations under
  * the License.
- */
+n */
 
 package org.ros.android;
 
@@ -26,10 +26,30 @@
 public class BitmapFromCompressedImage implements
     MessageCallable<Bitmap, sensor_msgs.CompressedImage> {
 
+    static{
+    System.loadLibrary("calculate");
+    }
+
+    public native long translateBGRtoRGB(int[] src,int width,int height);
+
+
   @Override
   public Bitmap call(sensor_msgs.CompressedImage message) {
     ChannelBuffer buffer = message.getData();
     byte[] data = buffer.array();
-    return BitmapFactory.decodeByteArray(data, buffer.arrayOffset(), buffer.readableBytes());
+
+
+    Bitmap bitmap = BitmapFactory.decodeByteArray(data, buffer.arrayOffset(), buffer.readableBytes());
+
+        final int Width = bitmap.getWidth();                             
+	final int Height = bitmap.getHeight();                           
+	Bitmap bitmap_output = Bitmap.createBitmap(Width, Height, Bitmap.Config.ARGB_8888);                                                             
+    int[] pixels = new int[Width*Height];                            
+    bitmap.getPixels(pixels, 0, Width, 0, 0, Width, Height);
+    translateBGRtoRGB(pixels,Width,Height);
+    bitmap_output.setPixels(pixels, 0, Width, 0, 0, Width, Height);  
+
+    return bitmap_output;
+    
   }
 }
